Deadline oddania listy 6.12.2020 22:00. Liczba punktów łącznie: 20.

Proszę o komentarze z numerem zadania oraz liczbą punktów możliwą do osiągnięcia bezpośrednio nad funkcjami, które tego zadania dotyczą. Przykład: //Zad1 (3pkt)

W zadaniach 1, 2 użyj dogodnej reprezentacji kolekcji i uzasadnij swój wybór. Tablice nie są optymalnym wyborem, można je potraktować jako absolutne minimum, jeśli ktoś chce minimum punktów do zaliczenia.

1) Napisz funkcję powielającą elementy w kolekcji na podstawie drugiej kolekcji
   określającej ile razy elementy mają być powielone.

   przykład: duplicate [1;2;3] oraz [0;3;1;4] daje wynik [2;2;2;3]

   Punkty: 2.5

2) Przepisz funkcję z zadania pierwszego tak, by pierwszy zbiór wejściowy nie mógł przyjmować duplikatów.

   Punkty: 2.5

------------------------


Lista przydatnych metod do poniższych zadań:

- getClass
- getDeclaredFields
- setAccessible
- getName
- get

3) Napisz cechę (trait) "Debug" z metodą "debugName", która wyświetli w konsoli nazwę klasy,
   do której cecha została dołączona.

Przykładowo:

class Point(xv: Int, yv: Int) extends Debug {
    var x: Int = xv
    var y: Int = yv
    var a: String = "test"
}

var p : Point = new Point(3,4);
p.debugName();

Wyświetli napis:

Class: Point

Punkty: 5

4) Napisz cechę (trait) "Debug" z metodą "debugVars", która wyświetli w konsoli,
   listę nazw, typów pól, wartości pól, do której cecha została dołączona.

var p : Point = new Point(3,4);
p.debugVars();

Wyświetli napis:

Var: x => int, 3
Var: y => int, 4
Var: a => java.lang.String, test

Punkty: 5

5) Zmodyfikuj zadania 3 i 4 tak, by dane przez nie zwracane były rzeczywiście zwracane przez program, a nie jedynie wypisywane w konsoli. Strukturę zwracanych danych oraz nazwy funkcji dobieraj sensownie - tak, by łatwo było odczytać co robią, co przechowują, co reprezentują. Chcemy na wyjściu uzyskać wszystkie informacje, które wcześniej były jedynie printowane.

Punkty: 5
